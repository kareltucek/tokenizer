!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Accepting	datastructs.h	/^        inline bool Accepting(){return (flags & sfAccepting);};$/;"	f	class:drgxtokenizer::State	access:public	signature:()
AddToken	DOC_user_guide	/^void Tokenizer::AddToken(std::wstring token_rgx, int id);$/;"	p	class:Tokenizer	file:	signature:(std::wstring token_rgx, int id)
AddToken	tokenizer.cpp	/^    void Tokenizer<T_data> ::AddToken(std::basic_string<T_data> token_rgx, int id, int base)$/;"	f	class:drgxtokenizer::Tokenizer	signature:(std::basic_string<T_data> token_rgx, int id, int base)
AddToken	tokenizer.h	/^        void AddToken(std::basic_string<T_data> token_rgx, int id, int base = DEFAULT_BASE);$/;"	p	class:drgxtokenizer::Tokenizer	access:public	signature:(std::basic_string<T_data> token_rgx, int id, int base = DEFAULT_BASE)
AddTokensSubmit	tokenizer.cpp	/^    void Tokenizer<T_data> ::AddTokensSubmit()$/;"	f	class:drgxtokenizer::Tokenizer	signature:()
AddTokensSubmit	tokenizer.h	/^        void AddTokensSubmit();$/;"	p	class:drgxtokenizer::Tokenizer	access:public	signature:()
AddTransition	datastructs.cpp	/^    void State<T_data>::AddTransition (Range<T_data> r, State* s)$/;"	f	class:drgxtokenizer::State	signature:(Range<T_data> r, State* s)
AddTransition	datastructs.h	/^        void AddTransition(Range<T_data>, State*);$/;"	p	class:drgxtokenizer::State	access:public	signature:(Range<T_data>, State*)
BINARY_COMPOSITION	tokenizer.h	10;"	d
CONTRACT	LICENSE	/^LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,$/;"	v
CTokenizer	tokenizer.h	/^typedef Tokenizer<char> CTokenizer;$/;"	t	namespace:drgxtokenizer
CTokenizer	tokenizer_lib.cpp	/^  typedef Tokenizer<char> CTokenizer;$/;"	t	namespace:drgxtokenizer	file:
Clear	tokenizer.cpp	/^    void Tokenizer<T_data> ::Clear()$/;"	f	class:drgxtokenizer::Tokenizer	signature:()
Clear	tokenizer.h	/^        void Clear();$/;"	p	class:drgxtokenizer::Tokenizer	access:public	signature:()
ConstructNFA	tokenizer.cpp	/^    FA<T_data> Tokenizer<T_data> ::ConstructNFA(std::basic_string<T_data> regex, int token_id)$/;"	f	class:drgxtokenizer::Tokenizer	signature:(std::basic_string<T_data> regex, int token_id)
ConstructNFA	tokenizer.h	/^        static drgxtokenizer::FA<T_data> ConstructNFA(std::basic_string<T_data> regex, int token_id = -1);$/;"	p	class:drgxtokenizer::Tokenizer	access:private	signature:(std::basic_string<T_data> regex, int token_id = -1)
ConvertToDFA	automaton.cpp	/^    FA<T_data> FA<T_data>::ConvertToDFA() \/\/ O(n*r) in respect to number of states$/;"	f	class:drgxtokenizer::FA	signature:()
ConvertToDFA	automaton.h	/^        FA ConvertToDFA();$/;"	p	class:drgxtokenizer::FA	access:public	signature:()
Correspond	DOC_dev	/^      bool Correspond(State * a, State * b);$/;"	p	file:	signature:(State * a, State * b)
Correspond	automaton.cpp	/^    bool FA<T_data>::Correspond(State<T_data>  * rep, State<T_data>  * state)$/;"	f	class:drgxtokenizer::FA	signature:(State<T_data> * rep, State<T_data> * state)
Correspond	automaton.h	/^        bool Correspond(State<T_data>  * a, State<T_data>  * b);$/;"	p	class:drgxtokenizer::FA	access:private	signature:(State<T_data> * a, State<T_data> * b)
CreateNewState	DOC_dev	/^      State * CreateNewState(States * states, bool accepting, bool& newstate, int tokenid);$/;"	p	file:	signature:(States * states, bool accepting, bool& newstate, int tokenid)
CreateNewState	automaton.cpp	/^    State<T_data>  * FA<T_data>::CreateNewState(std::set<State<T_data>*> * states, bool accepting, bool& newstate, int acceptingid) \/\/ O(log(#states))$/;"	f	class:drgxtokenizer::FA	signature:(std::set<State<T_data>*> * states, bool accepting, bool& newstate, int acceptingid)
CreateNewState	automaton.h	/^        State<T_data>  * CreateNewState(std::set<State<T_data>*> * states, bool accepting, bool& newstate, int tokenid);$/;"	p	class:drgxtokenizer::FA	access:private	signature:(std::set<State<T_data>*> * states, bool accepting, bool& newstate, int tokenid)
DATA_SIZE	main.cpp	27;"	d	file:
DATAshortRUCTS_H	datastructs.h	2;"	d
DEFAULT_BASE	tokenizer.h	11;"	d
DRGXTOKENIZER_TEMPLATED	tokenizer_lib.cpp	1;"	d	file:
DumpState	automaton.cpp	/^    void FA<T_data>::DumpState(State<T_data> * state)$/;"	f	class:drgxtokenizer::FA	signature:(State<T_data> * state)
DumpState	automaton.h	/^        static void DumpState(State<T_data> * state);$/;"	p	class:drgxtokenizer::FA	access:public	signature:(State<T_data> * state)
FA	automaton.cpp	/^    FA<T_data>::FA( Range<T_data>  range)$/;"	f	class:drgxtokenizer::FA	signature:( Range<T_data> range)
FA	automaton.cpp	/^    FA<T_data>::FA()$/;"	f	class:drgxtokenizer::FA	signature:()
FA	automaton.cpp	/^    FA<T_data>::FA(bool empty)$/;"	f	class:drgxtokenizer::FA	signature:(bool empty)
FA	automaton.cpp	/^    FA<T_data>::FA(const FA<T_data>& d)$/;"	f	class:drgxtokenizer::FA	signature:(const FA<T_data>& d)
FA	automaton.cpp	/^    FA<T_data>::FA(std::basic_string<T_data> string, bool range)$/;"	f	class:drgxtokenizer::FA	signature:(std::basic_string<T_data> string, bool range)
FA	automaton.h	/^        FA();$/;"	p	class:drgxtokenizer::FA	access:public	signature:()
FA	automaton.h	/^        FA(Range<T_data> );$/;"	p	class:drgxtokenizer::FA	access:public	signature:(Range<T_data> )
FA	automaton.h	/^        FA(bool empty);$/;"	p	class:drgxtokenizer::FA	access:public	signature:(bool empty)
FA	automaton.h	/^        FA(const FA&);$/;"	p	class:drgxtokenizer::FA	access:public	signature:(const FA&)
FA	automaton.h	/^        FA(std::basic_string<T_data>, bool); \/\/either a trivial string or content of a range$/;"	p	class:drgxtokenizer::FA	access:public	signature:(std::basic_string<T_data>, bool)
FA	automaton.h	/^    class FA$/;"	c	namespace:drgxtokenizer
FA	tokenizer_lib.cpp	/^template class drgxtokenizer::FA<char>;$/;"	m	class:drgxtokenizer	typeref:class:drgxtokenizer::	file:
FA	tokenizer_lib.cpp	/^template class drgxtokenizer::FA<wchar_t>;$/;"	m	class:drgxtokenizer	typeref:class:drgxtokenizer::	file:
FAstack	DOC_dev	/^    vector<FA> FAstack;$/;"	v
FAstack	tokenizer.h	/^        std::vector<drgxtokenizer::FA<T_data> > FAstack;$/;"	m	class:drgxtokenizer::Tokenizer	access:private
FROM	LICENSE	/^LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,$/;"	v
Free	automaton.cpp	/^    void FA<T_data>::Free()$/;"	f	class:drgxtokenizer::FA	signature:()
Free	automaton.h	/^        void Free();$/;"	p	class:drgxtokenizer::FA	access:public	signature:()
FreeConvertTables	DOC_dev	/^      void FreeConvertTables();$/;"	p	file:	signature:()
FreeConvertTables	automaton.cpp	/^    void FA<T_data>::FreeConvertTables()$/;"	f	class:drgxtokenizer::FA	signature:()
FreeConvertTables	automaton.h	/^        void FreeConvertTables();$/;"	p	class:drgxtokenizer::FA	access:private	signature:()
GetNext	datastructs.cpp	/^    drgxtokenizer::State<T_data>* State<T_data>::GetNext(T_data c)$/;"	f	class:drgxtokenizer::State	signature:(T_data c)
GetNext	datastructs.h	/^        State* GetNext(T_data c);$/;"	p	class:drgxtokenizer::State	access:public	signature:(T_data c)
GetRangeBounds	DOC_dev	/^      bool GetRangeBounds(State* state, int base, int& lower, int& upper);$/;"	p	file:	signature:(State* state, int base, int& lower, int& upper)
GetRangeBounds	automaton.cpp	/^    bool FA<T_data>::GetRangeBounds(State<T_data> * state, T_data base, T_data& lower, T_data& upper)$/;"	f	class:drgxtokenizer::FA	signature:(State<T_data> * state, T_data base, T_data& lower, T_data& upper)
GetRangeBounds	automaton.h	/^        bool GetRangeBounds(State<T_data> * state, T_data base, T_data& lower, T_data& upper);$/;"	p	class:drgxtokenizer::FA	access:private	signature:(State<T_data> * state, T_data base, T_data& lower, T_data& upper)
GetSpec	datastructs.cpp	/^    drgxtokenizer::State<T_data>* State<T_data>::GetSpec(short spec)$/;"	f	class:drgxtokenizer::State	signature:(short spec)
GetSpec	datastructs.h	/^        State* GetSpec(short spec);$/;"	p	class:drgxtokenizer::State	access:public	signature:(short spec)
IMPLIED	LICENSE	/^IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,$/;"	v
JoinRanges	DOC_dev	/^      void JoinRanges();$/;"	p	file:	signature:()
JoinRanges	automaton.cpp	/^    void FA<T_data>::JoinRanges() \/\/ #states * their transitions$/;"	f	class:drgxtokenizer::FA	signature:()
JoinRanges	automaton.h	/^        void JoinRanges();$/;"	p	class:drgxtokenizer::FA	access:private	signature:()
KIND	LICENSE	/^THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR$/;"	v
LIABILITY	LICENSE	/^LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,$/;"	v
Lambda	datastructs.h	/^        inline bool Lambda(){return (flags & sfLambda);};$/;"	f	class:drgxtokenizer::State	access:public	signature:()
LambdaClosure	DOC_dev	/^      States* LambdaClosure(const States& states, bool& accepting, int& acceptingid);$/;"	p	file:	signature:(const States& states, bool& accepting, int& acceptingid)
LambdaClosure	automaton.cpp	/^    std::set<State<T_data>*>* FA<T_data>::LambdaClosure(const std::set<State<T_data>*>& states, bool& accepting, int& acceptingid, short allowedTransitionTypes, short& transitionTypesFound ) \/\/O(links from the initial set)$/;"	f	class:drgxtokenizer::FA	signature:(const std::set<State<T_data>*>& states, bool& accepting, int& acceptingid, short allowedTransitionTypes, short& transitionTypesFound )
LambdaClosure	automaton.h	/^        std::set<State<T_data>*>* LambdaClosure(const std::set<State<T_data>*>& states, bool& accepting, int& acceptingid, short ttallowed, short& ttfound);$/;"	p	class:drgxtokenizer::FA	access:private	signature:(const std::set<State<T_data>*>& states, bool& accepting, int& acceptingid, short ttallowed, short& ttfound)
MERCHANTABILITY	LICENSE	/^IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,$/;"	v
MakeAccepting	automaton.cpp	/^    void FA<T_data>::MakeAccepting(int id)$/;"	f	class:drgxtokenizer::FA	signature:(int id)
MakeAccepting	automaton.h	/^        void MakeAccepting(int id);$/;"	p	class:drgxtokenizer::FA	access:public	signature:(int id)
Match	automaton.cpp	/^    bool FA<T_data>::Match(std::basic_string<T_data> string)$/;"	f	class:drgxtokenizer::FA	signature:(std::basic_string<T_data> string)
Match	automaton.h	/^        bool Match(std::basic_string<T_data>);$/;"	p	class:drgxtokenizer::FA	access:public	signature:(std::basic_string<T_data>)
Match	tokenizer.cpp	/^    bool Tokenizer<T_data> ::Match(std::basic_string<T_data> string, std::basic_string<T_data> pattern)$/;"	f	class:drgxtokenizer::Tokenizer	signature:(std::basic_string<T_data> string, std::basic_string<T_data> pattern)
Match	tokenizer.h	/^        static bool Match(std::basic_string<T_data> string, std::basic_string<T_data> pattern);$/;"	p	class:drgxtokenizer::Tokenizer	access:public	signature:(std::basic_string<T_data> string, std::basic_string<T_data> pattern)
Move	DOC_dev	/^      void Move(State* state, Range move, States& acumulator);$/;"	p	file:	signature:(State* state, Range move, States& acumulator)
Move	automaton.cpp	/^    void FA<T_data>::Move(State<T_data> * state, Range<T_data>  move, std::set<State<T_data>*>& acumulator)$/;"	f	class:drgxtokenizer::FA	signature:(State<T_data> * state, Range<T_data> move, std::set<State<T_data>*>& acumulator)
Move	automaton.h	/^        void Move(State<T_data> * state, Range<T_data>  move, std::set<State<T_data>*>& acumulator);$/;"	p	class:drgxtokenizer::FA	access:private	signature:(State<T_data> * state, Range<T_data> move, std::set<State<T_data>*>& acumulator)
NextToken	tokenizer.h	/^          bool NextToken(iterator_type& itr, const iterator_type& itrend, int& token_id);$/;"	p	class:drgxtokenizer::Tokenizer	access:public	signature:(iterator_type& itr, const iterator_type& itrend, int& token_id)
NextToken	tokenizer.h	/^    bool Tokenizer<T_data>::NextToken(iterator_type& itr, const iterator_type& itrend, int& token_id)$/;"	f	class:drgxtokenizer::Tokenizer	signature:(iterator_type& itr, const iterator_type& itrend, int& token_id)
OTHERWISE	LICENSE	/^LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,$/;"	v
Range	datastructs.cpp	/^    Range<T_data>::Range ()$/;"	f	class:drgxtokenizer::Range	signature:()
Range	datastructs.cpp	/^    Range<T_data>::Range (T_data a, T_data b, short spec)$/;"	f	class:drgxtokenizer::Range	signature:(T_data a, T_data b, short spec)
Range	datastructs.cpp	/^    Range<T_data>::Range (const Range<T_data> & r)$/;"	f	class:drgxtokenizer::Range	signature:(const Range<T_data> & r)
Range	datastructs.cpp	/^    Range<T_data>::Range (short spec)$/;"	f	class:drgxtokenizer::Range	signature:(short spec)
Range	datastructs.h	/^      Range();$/;"	p	struct:drgxtokenizer::Range	access:public	signature:()
Range	datastructs.h	/^      Range(T_data,T_data, short special = 0);$/;"	p	struct:drgxtokenizer::Range	access:public	signature:(T_data,T_data, short special = 0)
Range	datastructs.h	/^      Range(const Range&);$/;"	p	struct:drgxtokenizer::Range	access:public	signature:(const Range&)
Range	datastructs.h	/^      Range(short special);$/;"	p	struct:drgxtokenizer::Range	access:public	signature:(short special)
Range	datastructs.h	/^    struct Range$/;"	s	namespace:drgxtokenizer
Range	tokenizer_lib.cpp	/^template class drgxtokenizer::Range<char>;$/;"	m	class:drgxtokenizer	typeref:class:drgxtokenizer::	file:
Range	tokenizer_lib.cpp	/^template class drgxtokenizer::Range<wchar_t>;$/;"	m	class:drgxtokenizer	typeref:class:drgxtokenizer::	file:
ReadToken	DOC_dev	/^    token Tokenizer::ReadToken(wstring);$/;"	p	class:Tokenizer	file:	signature:(wstring)
ReadToken	tokenizer.cpp	/^    typename Tokenizer<T_data> ::token Tokenizer<T_data> ::ReadToken(std::basic_string<T_data>& str)$/;"	f	class:drgxtokenizer::Tokenizer	signature:(std::basic_string<T_data>& str)
ReadToken	tokenizer.h	/^        static token ReadToken(std::basic_string<T_data>& str);$/;"	p	class:drgxtokenizer::Tokenizer	access:private	signature:(std::basic_string<T_data>& str)
Reduce	automaton.cpp	/^    void FA<T_data>::Reduce()$/;"	f	class:drgxtokenizer::FA	signature:()
Reduce	automaton.h	/^        void Reduce();$/;"	p	class:drgxtokenizer::FA	access:public	signature:()
ReduceFinish	DOC_dev	/^      void ReduceFinish();$/;"	p	file:	signature:()
ReduceFinish	automaton.cpp	/^    void FA<T_data>::ReduceFinish()$/;"	f	class:drgxtokenizer::FA	signature:()
ReduceFinish	automaton.h	/^        void ReduceFinish();$/;"	p	class:drgxtokenizer::FA	access:private	signature:()
ReduceInit	DOC_dev	/^      void ReduceInit();$/;"	p	file:	signature:()
ReduceInit	automaton.cpp	/^    void FA<T_data>::ReduceInit()$/;"	f	class:drgxtokenizer::FA	signature:()
ReduceInit	automaton.h	/^        void ReduceInit();$/;"	p	class:drgxtokenizer::FA	access:private	signature:()
ReduceInsertNew	DOC_dev	/^      void ReduceInsertNew(State * state); \/\/new equivalence class$/;"	p	file:	signature:(State * state)
ReduceInsertNew	automaton.cpp	/^    void FA<T_data>::ReduceInsertNew(State<T_data>  * state)$/;"	f	class:drgxtokenizer::FA	signature:(State<T_data> * state)
ReduceInsertNew	automaton.h	/^        void ReduceInsertNew(State<T_data>  * state); \/\/new equivalence class$/;"	p	class:drgxtokenizer::FA	access:private	signature:(State<T_data> * state)
ReduceStep	DOC_dev	/^      bool ReduceStep();$/;"	p	file:	signature:()
ReduceStep	automaton.cpp	/^    bool FA<T_data>::ReduceStep()$/;"	f	class:drgxtokenizer::FA	signature:()
ReduceStep	automaton.h	/^        bool ReduceStep();$/;"	p	class:drgxtokenizer::FA	access:private	signature:()
SetAccepting	datastructs.h	/^        inline void SetAccepting(bool b){ flags = b ? flags | sfAccepting: (flags & (~sfAccepting)) ; };$/;"	f	class:drgxtokenizer::State	access:public	signature:(bool b)
SetLambda	datastructs.h	/^        inline void SetLambda(bool b){ flags = b ?   flags | sfLambda : (flags & (~sfLambda)); };$/;"	f	class:drgxtokenizer::State	access:public	signature:(bool b)
SetTType	datastructs.h	/^        inline void SetTType(short m){ flags = (flags & (~ttFullMask)) | m; };$/;"	f	class:drgxtokenizer::State	access:public	signature:(short m)
SetupNewState	automaton.cpp	/^   State<T_data>* FA<T_data>::SetupNewState(std::set<State<T_data>*> * closure, bool accepting, int acceptingid, const Range<T_data>& r, State<T_data>* state,  std::queue<State<T_data> *>& q) $/;"	f	class:drgxtokenizer::FA	signature:(std::set<State<T_data>*> * closure, bool accepting, int acceptingid, const Range<T_data>& r, State<T_data>* state, std::queue<State<T_data> *>& q)
SetupNewState	automaton.h	/^        State<T_data>* SetupNewState(std::set<State<T_data>*> * closure, bool accepting, int acceptingid, const Range<T_data>& r, State<T_data>* state,  std::queue<State<T_data> *>& queue) ;$/;"	p	class:drgxtokenizer::FA	access:private	signature:(std::set<State<T_data>*> * closure, bool accepting, int acceptingid, const Range<T_data>& r, State<T_data>* state, std::queue<State<T_data> *>& queue)
Software	LICENSE	/^copies of the Software, and to permit persons to whom the Software is$/;"	v
SolveClosure	automaton.cpp	/^     State<T_data>* FA<T_data>::SolveClosure(std::set<State<T_data>*>& s, std::queue<State<T_data>*>& q, const Range<T_data>& r, State<T_data> * state)$/;"	f	class:drgxtokenizer::FA	signature:(std::set<State<T_data>*>& s, std::queue<State<T_data>*>& q, const Range<T_data>& r, State<T_data> * state)
SolveClosure	automaton.h	/^        State<T_data>* SolveClosure(std::set<State<T_data>*>& s, std::queue<State<T_data>*>& q, const Range<T_data>& r, State<T_data> * state);$/;"	p	class:drgxtokenizer::FA	access:private	signature:(std::set<State<T_data>*>& s, std::queue<State<T_data>*>& q, const Range<T_data>& r, State<T_data> * state)
State	datastructs.cpp	/^    State<T_data>::State()$/;"	f	class:drgxtokenizer::State	signature:()
State	datastructs.h	/^        State();$/;"	p	class:drgxtokenizer::State	access:public	signature:()
State	datastructs.h	/^    class State$/;"	c	namespace:drgxtokenizer
State	tokenizer_lib.cpp	/^template class drgxtokenizer::State<char>;$/;"	m	class:drgxtokenizer	typeref:class:drgxtokenizer::	file:
State	tokenizer_lib.cpp	/^template class drgxtokenizer::State<wchar_t>;$/;"	m	class:drgxtokenizer	typeref:class:drgxtokenizer::	file:
StateClass	DOC_dev	/^        StateClass();$/;"	p	struct:StateClass	file:	access:public	signature:()
StateClass	DOC_dev	/^        StateClass(int tokenid, State * representant);$/;"	p	struct:StateClass	file:	access:public	signature:(int tokenid, State * representant)
StateClass	DOC_dev	/^      struct StateClass$/;"	s	file:
StateClass	automaton.cpp	/^    FA<T_data>::StateClass::StateClass()$/;"	f	class:drgxtokenizer::FA::StateClass	signature:()
StateClass	automaton.cpp	/^    FA<T_data>::StateClass::StateClass(int id_, State<T_data>  * representant_)$/;"	f	class:drgxtokenizer::FA::StateClass	signature:(int id_, State<T_data> * representant_)
StateClass	automaton.h	/^          StateClass();$/;"	p	struct:drgxtokenizer::FA::StateClass	access:public	signature:()
StateClass	automaton.h	/^          StateClass(int tokenid, State<T_data> * representant);$/;"	p	struct:drgxtokenizer::FA::StateClass	access:public	signature:(int tokenid, State<T_data> * representant)
StateClass	automaton.h	/^        struct StateClass$/;"	s	class:drgxtokenizer::FA	access:private
StateClass::StateClass	DOC_dev	/^        StateClass();$/;"	p	struct:StateClass	file:	access:public	signature:()
StateClass::StateClass	DOC_dev	/^        StateClass(int tokenid, State * representant);$/;"	p	struct:StateClass	file:	access:public	signature:(int tokenid, State * representant)
StateClass::id	DOC_dev	/^        int id; \/\/starts as tokenid; later may become whatever$/;"	m	struct:StateClass	file:	access:public
StateClass::operator <	DOC_dev	/^        bool operator<(const StateClass&) const;$/;"	p	struct:StateClass	file:	access:public	signature:(const StateClass&) const
StateClass::representant	DOC_dev	/^        State * representant;$/;"	m	struct:StateClass	file:	access:public
TOKENIZER_H	tokenizer.h	2;"	d
TType	datastructs.h	/^        inline bool TType(){return (flags & ttFullMask);};$/;"	f	class:drgxtokenizer::State	access:public	signature:()
Tokenize	automaton.h	/^          bool Tokenize(iterator_type& itr, const iterator_type& itrend, int& token_id); \/\/itr will get moved to the end of parsed token; itrend marks where parsing should end; return value means whether a valid token was matched$/;"	p	class:drgxtokenizer::FA	access:public	signature:(iterator_type& itr, const iterator_type& itrend, int& token_id)
Tokenize	automaton.h	/^    bool FA<T_data>::Tokenize(iterator_type& itr, const iterator_type& itrend, int& tokenid)$/;"	f	class:drgxtokenizer::FA	signature:(iterator_type& itr, const iterator_type& itrend, int& tokenid)
Tokenizer	tokenizer.cpp	/^    Tokenizer<T_data>::Tokenizer ()$/;"	f	class:drgxtokenizer::Tokenizer	signature:()
Tokenizer	tokenizer.h	/^        Tokenizer();$/;"	p	class:drgxtokenizer::Tokenizer	access:public	signature:()
Tokenizer	tokenizer.h	/^    class Tokenizer$/;"	c	namespace:drgxtokenizer
Tokenizer	tokenizer_lib.cpp	/^template class drgxtokenizer::Tokenizer<char>;$/;"	m	class:drgxtokenizer	typeref:class:drgxtokenizer::	file:
Tokenizer	tokenizer_lib.cpp	/^template class drgxtokenizer::Tokenizer<wchar_t>;$/;"	m	class:drgxtokenizer	typeref:class:drgxtokenizer::	file:
Tokenizer::AddToken	DOC_user_guide	/^void Tokenizer::AddToken(std::wstring token_rgx, int id);$/;"	p	class:Tokenizer	file:	signature:(std::wstring token_rgx, int id)
Tokenizer::ReadToken	DOC_dev	/^    token Tokenizer::ReadToken(wstring);$/;"	p	class:Tokenizer	file:	signature:(wstring)
Transition	datastructs.cpp	/^    Transition<T_data>::Transition (const Range<T_data>& r, State<T_data>* s)$/;"	f	class:drgxtokenizer::Transition	signature:(const Range<T_data>& r, State<T_data>* s)
Transition	datastructs.cpp	/^    Transition<T_data>::Transition (const Transition<T_data>& r)$/;"	f	class:drgxtokenizer::Transition	signature:(const Transition<T_data>& r)
Transition	datastructs.cpp	/^    Transition<T_data>::Transition (const Transition<T_data>& t, T_data a, T_data b)$/;"	f	class:drgxtokenizer::Transition	signature:(const Transition<T_data>& t, T_data a, T_data b)
Transition	datastructs.cpp	/^    Transition<T_data>::Transition (const std::set<State<T_data>*>& t, T_data a, T_data b)$/;"	f	class:drgxtokenizer::Transition	signature:(const std::set<State<T_data>*>& t, T_data a, T_data b)
Transition	datastructs.cpp	/^    Transition<T_data>::Transition (short spec)$/;"	f	class:drgxtokenizer::Transition	signature:(short spec)
Transition	datastructs.h	/^    Transition(const Range<T_data>&, State<T_data>* = NULL);$/;"	p	struct:drgxtokenizer::Transition	access:public	signature:(const Range<T_data>&, State<T_data>* = NULL)
Transition	datastructs.h	/^    Transition(const Transition&);$/;"	p	struct:drgxtokenizer::Transition	access:public	signature:(const Transition&)
Transition	datastructs.h	/^    Transition(const Transition&, T_data, T_data);$/;"	p	struct:drgxtokenizer::Transition	access:public	signature:(const Transition&, T_data, T_data)
Transition	datastructs.h	/^    Transition(const std::set<State<T_data>*>&, T_data, T_data);$/;"	p	struct:drgxtokenizer::Transition	access:public	signature:(const std::set<State<T_data>*>&, T_data, T_data)
Transition	datastructs.h	/^    Transition(short spec);$/;"	p	struct:drgxtokenizer::Transition	access:public	signature:(short spec)
Transition	datastructs.h	/^    struct Transition : public Range<T_data>$/;"	s	namespace:drgxtokenizer	inherits:Range
Transition	tokenizer_lib.cpp	/^template class drgxtokenizer::Transition<char>;$/;"	m	class:drgxtokenizer	typeref:class:drgxtokenizer::	file:
Transition	tokenizer_lib.cpp	/^template class drgxtokenizer::Transition<wchar_t>;$/;"	m	class:drgxtokenizer	typeref:class:drgxtokenizer::	file:
WTokenizer	tokenizer.h	/^typedef Tokenizer<wchar_t> WTokenizer;$/;"	t	namespace:drgxtokenizer
WTokenizer	tokenizer_lib.cpp	/^  typedef Tokenizer<wchar_t> WTokenizer;$/;"	t	namespace:drgxtokenizer	file:
_lambdaclosure	automaton.h	/^        int _lambdaclosure;$/;"	m	class:drgxtokenizer::FA	access:private
_lambdaclosure_outern	automaton.h	/^        int _lambdaclosure_outern;$/;"	m	class:drgxtokenizer::FA	access:private
_main_iterations	automaton.h	/^        int _main_iterations ;$/;"	m	class:drgxtokenizer::FA	access:private
_main_states	automaton.h	/^        int _main_states ;$/;"	m	class:drgxtokenizer::FA	access:private
_move	automaton.h	/^        int _move;$/;"	m	class:drgxtokenizer::FA	access:private
_newstate	automaton.h	/^        int _newstate;$/;"	m	class:drgxtokenizer::FA	access:private
_rangebounds	automaton.h	/^        int _rangebounds;$/;"	m	class:drgxtokenizer::FA	access:private
_rangebounds_outern	automaton.h	/^        int _rangebounds_outern;$/;"	m	class:drgxtokenizer::FA	access:private
accepting	automaton.h	/^        State<T_data>* accepting;$/;"	m	class:drgxtokenizer::FA	access:private
automaton_H	automaton.h	2;"	d
charge	LICENSE	/^Permission is hereby granted, free of charge, to any person obtaining a copy$/;"	v
classMap	DOC_dev	/^      std::map<State*, StateClass> classMap; \/\/maps states to their classes for reduction$/;"	v
classMap	automaton.h	/^        std::map<State<T_data>*, StateClass > classMap; \/\/maps states to their classes for reduction$/;"	m	class:drgxtokenizer::FA	access:private
classNew	DOC_dev	/^      std::set<StateClass> classNew; \/\/tmp storage for new states during step of reduction algorithm$/;"	v
classNew	automaton.h	/^        std::set<StateClass > classNew; \/\/tmp storage for new states during step of reduction algorithm$/;"	m	class:drgxtokenizer::FA	access:private
classid	automaton.h	/^        int classid;$/;"	m	class:drgxtokenizer::FA	access:private
convGetState	automaton.h	/^        std::map<std::set<State<T_data>*>*, State<T_data> *, state_set_comparer> convGetState;$/;"	m	class:drgxtokenizer::FA	access:private
convGetTable	automaton.h	/^        std::map<State<T_data> *, std::set<State<T_data>*>*> convGetTable;$/;"	m	class:drgxtokenizer::FA	access:private
copy	LICENSE	/^to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell$/;"	v
d	tokenizer.h	/^          drgxtokenizer::FA<T_data> d;$/;"	m	struct:drgxtokenizer::Tokenizer::token	access:public
distribute	LICENSE	/^to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell$/;"	v
drgxtokenizer	automaton.cpp	/^namespace drgxtokenizer$/;"	n	file:
drgxtokenizer	automaton.h	/^namespace drgxtokenizer$/;"	n
drgxtokenizer	datastructs.cpp	/^namespace drgxtokenizer$/;"	n	file:
drgxtokenizer	datastructs.h	/^namespace drgxtokenizer$/;"	n
drgxtokenizer	tokenizer.cpp	/^namespace drgxtokenizer$/;"	n	file:
drgxtokenizer	tokenizer.h	/^namespace drgxtokenizer$/;"	n
drgxtokenizer	tokenizer_lib.cpp	/^namespace drgxtokenizer$/;"	n	file:
drgxtokenizer::CTokenizer	tokenizer.h	/^typedef Tokenizer<char> CTokenizer;$/;"	t	namespace:drgxtokenizer
drgxtokenizer::CTokenizer	tokenizer_lib.cpp	/^  typedef Tokenizer<char> CTokenizer;$/;"	t	namespace:drgxtokenizer	file:
drgxtokenizer::FA	automaton.h	/^    class FA$/;"	c	namespace:drgxtokenizer
drgxtokenizer::FA	tokenizer_lib.cpp	/^template class drgxtokenizer::FA<char>;$/;"	m	class:drgxtokenizer	typeref:class:drgxtokenizer::	file:
drgxtokenizer::FA	tokenizer_lib.cpp	/^template class drgxtokenizer::FA<wchar_t>;$/;"	m	class:drgxtokenizer	typeref:class:drgxtokenizer::	file:
drgxtokenizer::FA::ConvertToDFA	automaton.cpp	/^    FA<T_data> FA<T_data>::ConvertToDFA() \/\/ O(n*r) in respect to number of states$/;"	f	class:drgxtokenizer::FA	signature:()
drgxtokenizer::FA::ConvertToDFA	automaton.h	/^        FA ConvertToDFA();$/;"	p	class:drgxtokenizer::FA	access:public	signature:()
drgxtokenizer::FA::Correspond	automaton.cpp	/^    bool FA<T_data>::Correspond(State<T_data>  * rep, State<T_data>  * state)$/;"	f	class:drgxtokenizer::FA	signature:(State<T_data> * rep, State<T_data> * state)
drgxtokenizer::FA::Correspond	automaton.h	/^        bool Correspond(State<T_data>  * a, State<T_data>  * b);$/;"	p	class:drgxtokenizer::FA	access:private	signature:(State<T_data> * a, State<T_data> * b)
drgxtokenizer::FA::CreateNewState	automaton.cpp	/^    State<T_data>  * FA<T_data>::CreateNewState(std::set<State<T_data>*> * states, bool accepting, bool& newstate, int acceptingid) \/\/ O(log(#states))$/;"	f	class:drgxtokenizer::FA	signature:(std::set<State<T_data>*> * states, bool accepting, bool& newstate, int acceptingid)
drgxtokenizer::FA::CreateNewState	automaton.h	/^        State<T_data>  * CreateNewState(std::set<State<T_data>*> * states, bool accepting, bool& newstate, int tokenid);$/;"	p	class:drgxtokenizer::FA	access:private	signature:(std::set<State<T_data>*> * states, bool accepting, bool& newstate, int tokenid)
drgxtokenizer::FA::DumpState	automaton.cpp	/^    void FA<T_data>::DumpState(State<T_data> * state)$/;"	f	class:drgxtokenizer::FA	signature:(State<T_data> * state)
drgxtokenizer::FA::DumpState	automaton.h	/^        static void DumpState(State<T_data> * state);$/;"	p	class:drgxtokenizer::FA	access:public	signature:(State<T_data> * state)
drgxtokenizer::FA::FA	automaton.cpp	/^    FA<T_data>::FA( Range<T_data>  range)$/;"	f	class:drgxtokenizer::FA	signature:( Range<T_data> range)
drgxtokenizer::FA::FA	automaton.cpp	/^    FA<T_data>::FA()$/;"	f	class:drgxtokenizer::FA	signature:()
drgxtokenizer::FA::FA	automaton.cpp	/^    FA<T_data>::FA(bool empty)$/;"	f	class:drgxtokenizer::FA	signature:(bool empty)
drgxtokenizer::FA::FA	automaton.cpp	/^    FA<T_data>::FA(const FA<T_data>& d)$/;"	f	class:drgxtokenizer::FA	signature:(const FA<T_data>& d)
drgxtokenizer::FA::FA	automaton.cpp	/^    FA<T_data>::FA(std::basic_string<T_data> string, bool range)$/;"	f	class:drgxtokenizer::FA	signature:(std::basic_string<T_data> string, bool range)
drgxtokenizer::FA::FA	automaton.h	/^        FA();$/;"	p	class:drgxtokenizer::FA	access:public	signature:()
drgxtokenizer::FA::FA	automaton.h	/^        FA(Range<T_data> );$/;"	p	class:drgxtokenizer::FA	access:public	signature:(Range<T_data> )
drgxtokenizer::FA::FA	automaton.h	/^        FA(bool empty);$/;"	p	class:drgxtokenizer::FA	access:public	signature:(bool empty)
drgxtokenizer::FA::FA	automaton.h	/^        FA(const FA&);$/;"	p	class:drgxtokenizer::FA	access:public	signature:(const FA&)
drgxtokenizer::FA::FA	automaton.h	/^        FA(std::basic_string<T_data>, bool); \/\/either a trivial string or content of a range$/;"	p	class:drgxtokenizer::FA	access:public	signature:(std::basic_string<T_data>, bool)
drgxtokenizer::FA::Free	automaton.cpp	/^    void FA<T_data>::Free()$/;"	f	class:drgxtokenizer::FA	signature:()
drgxtokenizer::FA::Free	automaton.h	/^        void Free();$/;"	p	class:drgxtokenizer::FA	access:public	signature:()
drgxtokenizer::FA::FreeConvertTables	automaton.cpp	/^    void FA<T_data>::FreeConvertTables()$/;"	f	class:drgxtokenizer::FA	signature:()
drgxtokenizer::FA::FreeConvertTables	automaton.h	/^        void FreeConvertTables();$/;"	p	class:drgxtokenizer::FA	access:private	signature:()
drgxtokenizer::FA::GetRangeBounds	automaton.cpp	/^    bool FA<T_data>::GetRangeBounds(State<T_data> * state, T_data base, T_data& lower, T_data& upper)$/;"	f	class:drgxtokenizer::FA	signature:(State<T_data> * state, T_data base, T_data& lower, T_data& upper)
drgxtokenizer::FA::GetRangeBounds	automaton.h	/^        bool GetRangeBounds(State<T_data> * state, T_data base, T_data& lower, T_data& upper);$/;"	p	class:drgxtokenizer::FA	access:private	signature:(State<T_data> * state, T_data base, T_data& lower, T_data& upper)
drgxtokenizer::FA::JoinRanges	automaton.cpp	/^    void FA<T_data>::JoinRanges() \/\/ #states * their transitions$/;"	f	class:drgxtokenizer::FA	signature:()
drgxtokenizer::FA::JoinRanges	automaton.h	/^        void JoinRanges();$/;"	p	class:drgxtokenizer::FA	access:private	signature:()
drgxtokenizer::FA::LambdaClosure	automaton.cpp	/^    std::set<State<T_data>*>* FA<T_data>::LambdaClosure(const std::set<State<T_data>*>& states, bool& accepting, int& acceptingid, short allowedTransitionTypes, short& transitionTypesFound ) \/\/O(links from the initial set)$/;"	f	class:drgxtokenizer::FA	signature:(const std::set<State<T_data>*>& states, bool& accepting, int& acceptingid, short allowedTransitionTypes, short& transitionTypesFound )
drgxtokenizer::FA::LambdaClosure	automaton.h	/^        std::set<State<T_data>*>* LambdaClosure(const std::set<State<T_data>*>& states, bool& accepting, int& acceptingid, short ttallowed, short& ttfound);$/;"	p	class:drgxtokenizer::FA	access:private	signature:(const std::set<State<T_data>*>& states, bool& accepting, int& acceptingid, short ttallowed, short& ttfound)
drgxtokenizer::FA::MakeAccepting	automaton.cpp	/^    void FA<T_data>::MakeAccepting(int id)$/;"	f	class:drgxtokenizer::FA	signature:(int id)
drgxtokenizer::FA::MakeAccepting	automaton.h	/^        void MakeAccepting(int id);$/;"	p	class:drgxtokenizer::FA	access:public	signature:(int id)
drgxtokenizer::FA::Match	automaton.cpp	/^    bool FA<T_data>::Match(std::basic_string<T_data> string)$/;"	f	class:drgxtokenizer::FA	signature:(std::basic_string<T_data> string)
drgxtokenizer::FA::Match	automaton.h	/^        bool Match(std::basic_string<T_data>);$/;"	p	class:drgxtokenizer::FA	access:public	signature:(std::basic_string<T_data>)
drgxtokenizer::FA::Move	automaton.cpp	/^    void FA<T_data>::Move(State<T_data> * state, Range<T_data>  move, std::set<State<T_data>*>& acumulator)$/;"	f	class:drgxtokenizer::FA	signature:(State<T_data> * state, Range<T_data> move, std::set<State<T_data>*>& acumulator)
drgxtokenizer::FA::Move	automaton.h	/^        void Move(State<T_data> * state, Range<T_data>  move, std::set<State<T_data>*>& acumulator);$/;"	p	class:drgxtokenizer::FA	access:private	signature:(State<T_data> * state, Range<T_data> move, std::set<State<T_data>*>& acumulator)
drgxtokenizer::FA::Reduce	automaton.cpp	/^    void FA<T_data>::Reduce()$/;"	f	class:drgxtokenizer::FA	signature:()
drgxtokenizer::FA::Reduce	automaton.h	/^        void Reduce();$/;"	p	class:drgxtokenizer::FA	access:public	signature:()
drgxtokenizer::FA::ReduceFinish	automaton.cpp	/^    void FA<T_data>::ReduceFinish()$/;"	f	class:drgxtokenizer::FA	signature:()
drgxtokenizer::FA::ReduceFinish	automaton.h	/^        void ReduceFinish();$/;"	p	class:drgxtokenizer::FA	access:private	signature:()
drgxtokenizer::FA::ReduceInit	automaton.cpp	/^    void FA<T_data>::ReduceInit()$/;"	f	class:drgxtokenizer::FA	signature:()
drgxtokenizer::FA::ReduceInit	automaton.h	/^        void ReduceInit();$/;"	p	class:drgxtokenizer::FA	access:private	signature:()
drgxtokenizer::FA::ReduceInsertNew	automaton.cpp	/^    void FA<T_data>::ReduceInsertNew(State<T_data>  * state)$/;"	f	class:drgxtokenizer::FA	signature:(State<T_data> * state)
drgxtokenizer::FA::ReduceInsertNew	automaton.h	/^        void ReduceInsertNew(State<T_data>  * state); \/\/new equivalence class$/;"	p	class:drgxtokenizer::FA	access:private	signature:(State<T_data> * state)
drgxtokenizer::FA::ReduceStep	automaton.cpp	/^    bool FA<T_data>::ReduceStep()$/;"	f	class:drgxtokenizer::FA	signature:()
drgxtokenizer::FA::ReduceStep	automaton.h	/^        bool ReduceStep();$/;"	p	class:drgxtokenizer::FA	access:private	signature:()
drgxtokenizer::FA::SetupNewState	automaton.cpp	/^   State<T_data>* FA<T_data>::SetupNewState(std::set<State<T_data>*> * closure, bool accepting, int acceptingid, const Range<T_data>& r, State<T_data>* state,  std::queue<State<T_data> *>& q) $/;"	f	class:drgxtokenizer::FA	signature:(std::set<State<T_data>*> * closure, bool accepting, int acceptingid, const Range<T_data>& r, State<T_data>* state, std::queue<State<T_data> *>& q)
drgxtokenizer::FA::SetupNewState	automaton.h	/^        State<T_data>* SetupNewState(std::set<State<T_data>*> * closure, bool accepting, int acceptingid, const Range<T_data>& r, State<T_data>* state,  std::queue<State<T_data> *>& queue) ;$/;"	p	class:drgxtokenizer::FA	access:private	signature:(std::set<State<T_data>*> * closure, bool accepting, int acceptingid, const Range<T_data>& r, State<T_data>* state, std::queue<State<T_data> *>& queue)
drgxtokenizer::FA::SolveClosure	automaton.cpp	/^     State<T_data>* FA<T_data>::SolveClosure(std::set<State<T_data>*>& s, std::queue<State<T_data>*>& q, const Range<T_data>& r, State<T_data> * state)$/;"	f	class:drgxtokenizer::FA	signature:(std::set<State<T_data>*>& s, std::queue<State<T_data>*>& q, const Range<T_data>& r, State<T_data> * state)
drgxtokenizer::FA::SolveClosure	automaton.h	/^        State<T_data>* SolveClosure(std::set<State<T_data>*>& s, std::queue<State<T_data>*>& q, const Range<T_data>& r, State<T_data> * state);$/;"	p	class:drgxtokenizer::FA	access:private	signature:(std::set<State<T_data>*>& s, std::queue<State<T_data>*>& q, const Range<T_data>& r, State<T_data> * state)
drgxtokenizer::FA::StateClass	automaton.h	/^        struct StateClass$/;"	s	class:drgxtokenizer::FA	access:private
drgxtokenizer::FA::StateClass::StateClass	automaton.cpp	/^    FA<T_data>::StateClass::StateClass()$/;"	f	class:drgxtokenizer::FA::StateClass	signature:()
drgxtokenizer::FA::StateClass::StateClass	automaton.cpp	/^    FA<T_data>::StateClass::StateClass(int id_, State<T_data>  * representant_)$/;"	f	class:drgxtokenizer::FA::StateClass	signature:(int id_, State<T_data> * representant_)
drgxtokenizer::FA::StateClass::StateClass	automaton.h	/^          StateClass();$/;"	p	struct:drgxtokenizer::FA::StateClass	access:public	signature:()
drgxtokenizer::FA::StateClass::StateClass	automaton.h	/^          StateClass(int tokenid, State<T_data> * representant);$/;"	p	struct:drgxtokenizer::FA::StateClass	access:public	signature:(int tokenid, State<T_data> * representant)
drgxtokenizer::FA::StateClass::id	automaton.h	/^          int id; \/\/starts as tokenid; later may become whatever$/;"	m	struct:drgxtokenizer::FA::StateClass	access:public
drgxtokenizer::FA::StateClass::operator <	automaton.cpp	/^    bool FA<T_data>::StateClass::operator<(const StateClass& rhs) const$/;"	f	class:drgxtokenizer::FA::StateClass	signature:(const StateClass& rhs) const
drgxtokenizer::FA::StateClass::operator <	automaton.h	/^          bool operator<(const StateClass&) const;$/;"	p	struct:drgxtokenizer::FA::StateClass	access:public	signature:(const StateClass&) const
drgxtokenizer::FA::StateClass::representant	automaton.h	/^          State<T_data>* representant;$/;"	m	struct:drgxtokenizer::FA::StateClass	access:public
drgxtokenizer::FA::Tokenize	automaton.h	/^          bool Tokenize(iterator_type& itr, const iterator_type& itrend, int& token_id); \/\/itr will get moved to the end of parsed token; itrend marks where parsing should end; return value means whether a valid token was matched$/;"	p	class:drgxtokenizer::FA	access:public	signature:(iterator_type& itr, const iterator_type& itrend, int& token_id)
drgxtokenizer::FA::Tokenize	automaton.h	/^    bool FA<T_data>::Tokenize(iterator_type& itr, const iterator_type& itrend, int& tokenid)$/;"	f	class:drgxtokenizer::FA	signature:(iterator_type& itr, const iterator_type& itrend, int& tokenid)
drgxtokenizer::FA::_lambdaclosure	automaton.h	/^        int _lambdaclosure;$/;"	m	class:drgxtokenizer::FA	access:private
drgxtokenizer::FA::_lambdaclosure_outern	automaton.h	/^        int _lambdaclosure_outern;$/;"	m	class:drgxtokenizer::FA	access:private
drgxtokenizer::FA::_main_iterations	automaton.h	/^        int _main_iterations ;$/;"	m	class:drgxtokenizer::FA	access:private
drgxtokenizer::FA::_main_states	automaton.h	/^        int _main_states ;$/;"	m	class:drgxtokenizer::FA	access:private
drgxtokenizer::FA::_move	automaton.h	/^        int _move;$/;"	m	class:drgxtokenizer::FA	access:private
drgxtokenizer::FA::_newstate	automaton.h	/^        int _newstate;$/;"	m	class:drgxtokenizer::FA	access:private
drgxtokenizer::FA::_rangebounds	automaton.h	/^        int _rangebounds;$/;"	m	class:drgxtokenizer::FA	access:private
drgxtokenizer::FA::_rangebounds_outern	automaton.h	/^        int _rangebounds_outern;$/;"	m	class:drgxtokenizer::FA	access:private
drgxtokenizer::FA::accepting	automaton.h	/^        State<T_data>* accepting;$/;"	m	class:drgxtokenizer::FA	access:private
drgxtokenizer::FA::classMap	automaton.h	/^        std::map<State<T_data>*, StateClass > classMap; \/\/maps states to their classes for reduction$/;"	m	class:drgxtokenizer::FA	access:private
drgxtokenizer::FA::classNew	automaton.h	/^        std::set<StateClass > classNew; \/\/tmp storage for new states during step of reduction algorithm$/;"	m	class:drgxtokenizer::FA	access:private
drgxtokenizer::FA::classid	automaton.h	/^        int classid;$/;"	m	class:drgxtokenizer::FA	access:private
drgxtokenizer::FA::convGetState	automaton.h	/^        std::map<std::set<State<T_data>*>*, State<T_data> *, state_set_comparer> convGetState;$/;"	m	class:drgxtokenizer::FA	access:private
drgxtokenizer::FA::convGetTable	automaton.h	/^        std::map<State<T_data> *, std::set<State<T_data>*>*> convGetTable;$/;"	m	class:drgxtokenizer::FA	access:private
drgxtokenizer::FA::entering	automaton.h	/^        State<T_data>* entering;$/;"	m	class:drgxtokenizer::FA	access:private
drgxtokenizer::FA::operator -	automaton.cpp	/^    const FA<T_data> FA<T_data>::operator-(const FA<T_data>& d)$/;"	f	class:drgxtokenizer::FA	signature:(const FA<T_data>& d)
drgxtokenizer::FA::operator -	automaton.h	/^        const FA operator-(const FA&);$/;"	p	class:drgxtokenizer::FA	access:public	signature:(const FA&)
drgxtokenizer::FA::operator =	automaton.cpp	/^    FA<T_data>& FA<T_data>::operator=(const FA<T_data>& d)$/;"	f	class:drgxtokenizer::FA	signature:(const FA<T_data>& d)
drgxtokenizer::FA::operator =	automaton.h	/^        FA& operator=(const FA&);$/;"	p	class:drgxtokenizer::FA	access:public	signature:(const FA&)
drgxtokenizer::FA::operator |	automaton.cpp	/^    const FA<T_data> FA<T_data>::operator|(const FA<T_data>& d)$/;"	f	class:drgxtokenizer::FA	signature:(const FA<T_data>& d)
drgxtokenizer::FA::operator |	automaton.h	/^        const FA operator|(const FA&);$/;"	p	class:drgxtokenizer::FA	access:public	signature:(const FA&)
drgxtokenizer::FA::plus	automaton.cpp	/^    const FA<T_data> FA<T_data>::plus()$/;"	f	class:drgxtokenizer::FA	signature:()
drgxtokenizer::FA::plus	automaton.h	/^        const FA plus();$/;"	p	class:drgxtokenizer::FA	access:public	signature:()
drgxtokenizer::FA::qmark	automaton.cpp	/^    const FA<T_data> FA<T_data>::qmark()$/;"	f	class:drgxtokenizer::FA	signature:()
drgxtokenizer::FA::qmark	automaton.h	/^        const FA qmark();$/;"	p	class:drgxtokenizer::FA	access:public	signature:()
drgxtokenizer::FA::size	automaton.h	/^        int size;$/;"	m	class:drgxtokenizer::FA	access:public
drgxtokenizer::FA::star	automaton.cpp	/^    const FA<T_data> FA<T_data>::star()$/;"	f	class:drgxtokenizer::FA	signature:()
drgxtokenizer::FA::star	automaton.h	/^        const FA star();$/;"	p	class:drgxtokenizer::FA	access:public	signature:()
drgxtokenizer::FA::state_set_comparer	automaton.h	/^        struct state_set_comparer$/;"	s	class:drgxtokenizer::FA	access:private
drgxtokenizer::FA::state_set_comparer::operator ()	automaton.cpp	/^    bool FA<T_data>::state_set_comparer::operator ()(const std::set<State<T_data>*> * lhs, const std::set<State<T_data>*> * rhs) const$/;"	f	class:drgxtokenizer::FA::state_set_comparer	signature:(const std::set<State<T_data>*> * lhs, const std::set<State<T_data>*> * rhs) const
drgxtokenizer::FA::state_set_comparer::operator ()	automaton.h	/^          bool operator() (const std::set<State<T_data>*>* lhs, const std::set<State<T_data>*>* rhs) const;$/;"	p	struct:drgxtokenizer::FA::state_set_comparer	access:public	signature:(const std::set<State<T_data>*>* lhs, const std::set<State<T_data>*>* rhs) const
drgxtokenizer::FA::tempStates	automaton.h	/^        std::set<State<T_data>*> tempStates; \/\/full list of states; serves for reduction; currently filled during NFA->DFA conversion$/;"	m	class:drgxtokenizer::FA	access:private
drgxtokenizer::Range	datastructs.h	/^    struct Range$/;"	s	namespace:drgxtokenizer
drgxtokenizer::Range	tokenizer_lib.cpp	/^template class drgxtokenizer::Range<char>;$/;"	m	class:drgxtokenizer	typeref:class:drgxtokenizer::	file:
drgxtokenizer::Range	tokenizer_lib.cpp	/^template class drgxtokenizer::Range<wchar_t>;$/;"	m	class:drgxtokenizer	typeref:class:drgxtokenizer::	file:
drgxtokenizer::Range::Range	datastructs.cpp	/^    Range<T_data>::Range ()$/;"	f	class:drgxtokenizer::Range	signature:()
drgxtokenizer::Range::Range	datastructs.cpp	/^    Range<T_data>::Range (T_data a, T_data b, short spec)$/;"	f	class:drgxtokenizer::Range	signature:(T_data a, T_data b, short spec)
drgxtokenizer::Range::Range	datastructs.cpp	/^    Range<T_data>::Range (const Range<T_data> & r)$/;"	f	class:drgxtokenizer::Range	signature:(const Range<T_data> & r)
drgxtokenizer::Range::Range	datastructs.cpp	/^    Range<T_data>::Range (short spec)$/;"	f	class:drgxtokenizer::Range	signature:(short spec)
drgxtokenizer::Range::Range	datastructs.h	/^      Range();$/;"	p	struct:drgxtokenizer::Range	access:public	signature:()
drgxtokenizer::Range::Range	datastructs.h	/^      Range(T_data,T_data, short special = 0);$/;"	p	struct:drgxtokenizer::Range	access:public	signature:(T_data,T_data, short special = 0)
drgxtokenizer::Range::Range	datastructs.h	/^      Range(const Range&);$/;"	p	struct:drgxtokenizer::Range	access:public	signature:(const Range&)
drgxtokenizer::Range::Range	datastructs.h	/^      Range(short special);$/;"	p	struct:drgxtokenizer::Range	access:public	signature:(short special)
drgxtokenizer::Range::end	datastructs.h	/^      T_data end;$/;"	m	struct:drgxtokenizer::Range	access:public
drgxtokenizer::Range::operator <	datastructs.cpp	/^    bool Range<T_data> ::operator<(const Range<T_data> & d) const$/;"	f	class:drgxtokenizer::Range	signature:(const Range<T_data> & d) const
drgxtokenizer::Range::operator <	datastructs.h	/^      bool operator<(const Range&) const;$/;"	p	struct:drgxtokenizer::Range	access:public	signature:(const Range&) const
drgxtokenizer::Range::operator >	datastructs.cpp	/^    bool Range<T_data> ::operator>(const Range<T_data> & d) const$/;"	f	class:drgxtokenizer::Range	signature:(const Range<T_data> & d) const
drgxtokenizer::Range::operator >	datastructs.h	/^      bool operator>(const Range&) const;$/;"	p	struct:drgxtokenizer::Range	access:public	signature:(const Range&) const
drgxtokenizer::Range::special	datastructs.h	/^      short special;$/;"	m	struct:drgxtokenizer::Range	access:public
drgxtokenizer::Range::start	datastructs.h	/^      T_data start;$/;"	m	struct:drgxtokenizer::Range	access:public
drgxtokenizer::State	datastructs.h	/^    class State$/;"	c	namespace:drgxtokenizer
drgxtokenizer::State	tokenizer_lib.cpp	/^template class drgxtokenizer::State<char>;$/;"	m	class:drgxtokenizer	typeref:class:drgxtokenizer::	file:
drgxtokenizer::State	tokenizer_lib.cpp	/^template class drgxtokenizer::State<wchar_t>;$/;"	m	class:drgxtokenizer	typeref:class:drgxtokenizer::	file:
drgxtokenizer::State::Accepting	datastructs.h	/^        inline bool Accepting(){return (flags & sfAccepting);};$/;"	f	class:drgxtokenizer::State	access:public	signature:()
drgxtokenizer::State::AddTransition	datastructs.cpp	/^    void State<T_data>::AddTransition (Range<T_data> r, State* s)$/;"	f	class:drgxtokenizer::State	signature:(Range<T_data> r, State* s)
drgxtokenizer::State::AddTransition	datastructs.h	/^        void AddTransition(Range<T_data>, State*);$/;"	p	class:drgxtokenizer::State	access:public	signature:(Range<T_data>, State*)
drgxtokenizer::State::GetNext	datastructs.cpp	/^    drgxtokenizer::State<T_data>* State<T_data>::GetNext(T_data c)$/;"	f	class:drgxtokenizer::State	signature:(T_data c)
drgxtokenizer::State::GetNext	datastructs.h	/^        State* GetNext(T_data c);$/;"	p	class:drgxtokenizer::State	access:public	signature:(T_data c)
drgxtokenizer::State::GetSpec	datastructs.cpp	/^    drgxtokenizer::State<T_data>* State<T_data>::GetSpec(short spec)$/;"	f	class:drgxtokenizer::State	signature:(short spec)
drgxtokenizer::State::GetSpec	datastructs.h	/^        State* GetSpec(short spec);$/;"	p	class:drgxtokenizer::State	access:public	signature:(short spec)
drgxtokenizer::State::Lambda	datastructs.h	/^        inline bool Lambda(){return (flags & sfLambda);};$/;"	f	class:drgxtokenizer::State	access:public	signature:()
drgxtokenizer::State::SetAccepting	datastructs.h	/^        inline void SetAccepting(bool b){ flags = b ? flags | sfAccepting: (flags & (~sfAccepting)) ; };$/;"	f	class:drgxtokenizer::State	access:public	signature:(bool b)
drgxtokenizer::State::SetLambda	datastructs.h	/^        inline void SetLambda(bool b){ flags = b ?   flags | sfLambda : (flags & (~sfLambda)); };$/;"	f	class:drgxtokenizer::State	access:public	signature:(bool b)
drgxtokenizer::State::SetTType	datastructs.h	/^        inline void SetTType(short m){ flags = (flags & (~ttFullMask)) | m; };$/;"	f	class:drgxtokenizer::State	access:public	signature:(short m)
drgxtokenizer::State::State	datastructs.cpp	/^    State<T_data>::State()$/;"	f	class:drgxtokenizer::State	signature:()
drgxtokenizer::State::State	datastructs.h	/^        State();$/;"	p	class:drgxtokenizer::State	access:public	signature:()
drgxtokenizer::State::TType	datastructs.h	/^        inline bool TType(){return (flags & ttFullMask);};$/;"	f	class:drgxtokenizer::State	access:public	signature:()
drgxtokenizer::State::flags	datastructs.h	/^        short flags; \/\/should be removed, if possible (and replaced by flags)$/;"	m	class:drgxtokenizer::State	access:public
drgxtokenizer::State::tokenid	datastructs.h	/^        short tokenid;$/;"	m	class:drgxtokenizer::State	access:public
drgxtokenizer::State::transitions	datastructs.h	/^        std::set<Transition<T_data> > transitions;$/;"	m	class:drgxtokenizer::State	access:public
drgxtokenizer::Tokenizer	tokenizer.h	/^    class Tokenizer$/;"	c	namespace:drgxtokenizer
drgxtokenizer::Tokenizer	tokenizer_lib.cpp	/^template class drgxtokenizer::Tokenizer<char>;$/;"	m	class:drgxtokenizer	typeref:class:drgxtokenizer::	file:
drgxtokenizer::Tokenizer	tokenizer_lib.cpp	/^template class drgxtokenizer::Tokenizer<wchar_t>;$/;"	m	class:drgxtokenizer	typeref:class:drgxtokenizer::	file:
drgxtokenizer::Tokenizer::AddToken	tokenizer.cpp	/^    void Tokenizer<T_data> ::AddToken(std::basic_string<T_data> token_rgx, int id, int base)$/;"	f	class:drgxtokenizer::Tokenizer	signature:(std::basic_string<T_data> token_rgx, int id, int base)
drgxtokenizer::Tokenizer::AddToken	tokenizer.h	/^        void AddToken(std::basic_string<T_data> token_rgx, int id, int base = DEFAULT_BASE);$/;"	p	class:drgxtokenizer::Tokenizer	access:public	signature:(std::basic_string<T_data> token_rgx, int id, int base = DEFAULT_BASE)
drgxtokenizer::Tokenizer::AddTokensSubmit	tokenizer.cpp	/^    void Tokenizer<T_data> ::AddTokensSubmit()$/;"	f	class:drgxtokenizer::Tokenizer	signature:()
drgxtokenizer::Tokenizer::AddTokensSubmit	tokenizer.h	/^        void AddTokensSubmit();$/;"	p	class:drgxtokenizer::Tokenizer	access:public	signature:()
drgxtokenizer::Tokenizer::Clear	tokenizer.cpp	/^    void Tokenizer<T_data> ::Clear()$/;"	f	class:drgxtokenizer::Tokenizer	signature:()
drgxtokenizer::Tokenizer::Clear	tokenizer.h	/^        void Clear();$/;"	p	class:drgxtokenizer::Tokenizer	access:public	signature:()
drgxtokenizer::Tokenizer::ConstructNFA	tokenizer.cpp	/^    FA<T_data> Tokenizer<T_data> ::ConstructNFA(std::basic_string<T_data> regex, int token_id)$/;"	f	class:drgxtokenizer::Tokenizer	signature:(std::basic_string<T_data> regex, int token_id)
drgxtokenizer::Tokenizer::ConstructNFA	tokenizer.h	/^        static drgxtokenizer::FA<T_data> ConstructNFA(std::basic_string<T_data> regex, int token_id = -1);$/;"	p	class:drgxtokenizer::Tokenizer	access:private	signature:(std::basic_string<T_data> regex, int token_id = -1)
drgxtokenizer::Tokenizer::FAstack	tokenizer.h	/^        std::vector<drgxtokenizer::FA<T_data> > FAstack;$/;"	m	class:drgxtokenizer::Tokenizer	access:private
drgxtokenizer::Tokenizer::Match	tokenizer.cpp	/^    bool Tokenizer<T_data> ::Match(std::basic_string<T_data> string, std::basic_string<T_data> pattern)$/;"	f	class:drgxtokenizer::Tokenizer	signature:(std::basic_string<T_data> string, std::basic_string<T_data> pattern)
drgxtokenizer::Tokenizer::Match	tokenizer.h	/^        static bool Match(std::basic_string<T_data> string, std::basic_string<T_data> pattern);$/;"	p	class:drgxtokenizer::Tokenizer	access:public	signature:(std::basic_string<T_data> string, std::basic_string<T_data> pattern)
drgxtokenizer::Tokenizer::NextToken	tokenizer.h	/^          bool NextToken(iterator_type& itr, const iterator_type& itrend, int& token_id);$/;"	p	class:drgxtokenizer::Tokenizer	access:public	signature:(iterator_type& itr, const iterator_type& itrend, int& token_id)
drgxtokenizer::Tokenizer::NextToken	tokenizer.h	/^    bool Tokenizer<T_data>::NextToken(iterator_type& itr, const iterator_type& itrend, int& token_id)$/;"	f	class:drgxtokenizer::Tokenizer	signature:(iterator_type& itr, const iterator_type& itrend, int& token_id)
drgxtokenizer::Tokenizer::ReadToken	tokenizer.cpp	/^    typename Tokenizer<T_data> ::token Tokenizer<T_data> ::ReadToken(std::basic_string<T_data>& str)$/;"	f	class:drgxtokenizer::Tokenizer	signature:(std::basic_string<T_data>& str)
drgxtokenizer::Tokenizer::ReadToken	tokenizer.h	/^        static token ReadToken(std::basic_string<T_data>& str);$/;"	p	class:drgxtokenizer::Tokenizer	access:private	signature:(std::basic_string<T_data>& str)
drgxtokenizer::Tokenizer::Tokenizer	tokenizer.cpp	/^    Tokenizer<T_data>::Tokenizer ()$/;"	f	class:drgxtokenizer::Tokenizer	signature:()
drgxtokenizer::Tokenizer::Tokenizer	tokenizer.h	/^        Tokenizer();$/;"	p	class:drgxtokenizer::Tokenizer	access:public	signature:()
drgxtokenizer::Tokenizer::engine	tokenizer.h	/^        drgxtokenizer::FA<T_data> engine;$/;"	m	class:drgxtokenizer::Tokenizer	access:private
drgxtokenizer::Tokenizer::is_operator	tokenizer.cpp	/^    bool Tokenizer<T_data> ::is_operator(T_data c)$/;"	f	class:drgxtokenizer::Tokenizer	signature:(T_data c)
drgxtokenizer::Tokenizer::is_operator	tokenizer.h	/^        static bool is_operator(T_data c);$/;"	p	class:drgxtokenizer::Tokenizer	access:private	signature:(T_data c)
drgxtokenizer::Tokenizer::token	tokenizer.h	/^        struct token \/\/just regex construction token :-)$/;"	s	class:drgxtokenizer::Tokenizer	access:private
drgxtokenizer::Tokenizer::token::d	tokenizer.h	/^          drgxtokenizer::FA<T_data> d;$/;"	m	struct:drgxtokenizer::Tokenizer::token	access:public
drgxtokenizer::Tokenizer::token::s	tokenizer.h	/^          std::basic_string<T_data> s;$/;"	m	struct:drgxtokenizer::Tokenizer::token	access:public
drgxtokenizer::Tokenizer::token::t	tokenizer.h	/^          drgxtokenizer::type t;$/;"	m	struct:drgxtokenizer::Tokenizer::token	access:public
drgxtokenizer::Tokenizer::token::token	tokenizer.cpp	/^    Tokenizer<T_data> ::token::token(type t_, std::basic_string<T_data> s_)$/;"	f	class:drgxtokenizer::Tokenizer::token	signature:(type t_, std::basic_string<T_data> s_)
drgxtokenizer::Tokenizer::token::token	tokenizer.cpp	/^    Tokenizer<T_data>::token::token()$/;"	f	class:drgxtokenizer::Tokenizer::token	signature:()
drgxtokenizer::Tokenizer::token::token	tokenizer.cpp	/^    Tokenizer<T_data>::token::token(FA<T_data> automaton)$/;"	f	class:drgxtokenizer::Tokenizer::token	signature:(FA<T_data> automaton)
drgxtokenizer::Tokenizer::token::token	tokenizer.h	/^          token();$/;"	p	struct:drgxtokenizer::Tokenizer::token	access:public	signature:()
drgxtokenizer::Tokenizer::token::token	tokenizer.h	/^          token(drgxtokenizer::FA<T_data>);$/;"	p	struct:drgxtokenizer::Tokenizer::token	access:public	signature:(drgxtokenizer::FA<T_data>)
drgxtokenizer::Tokenizer::token::token	tokenizer.h	/^          token(drgxtokenizer::type,std::basic_string<T_data>);$/;"	p	struct:drgxtokenizer::Tokenizer::token	access:public	signature:(drgxtokenizer::type,std::basic_string<T_data>)
drgxtokenizer::Tokenizer::tokenCount	tokenizer.h	/^        int tokenCount;$/;"	m	class:drgxtokenizer::Tokenizer	access:private
drgxtokenizer::Tokenizer::~Tokenizer	tokenizer.cpp	/^    Tokenizer<T_data>::~Tokenizer<T_data> ()$/;"	f	class:drgxtokenizer::Tokenizer	signature:()
drgxtokenizer::Tokenizer::~Tokenizer	tokenizer.h	/^        ~Tokenizer();$/;"	p	class:drgxtokenizer::Tokenizer	access:public	signature:()
drgxtokenizer::Transition	datastructs.h	/^    struct Transition : public Range<T_data>$/;"	s	namespace:drgxtokenizer	inherits:Range
drgxtokenizer::Transition	tokenizer_lib.cpp	/^template class drgxtokenizer::Transition<char>;$/;"	m	class:drgxtokenizer	typeref:class:drgxtokenizer::	file:
drgxtokenizer::Transition	tokenizer_lib.cpp	/^template class drgxtokenizer::Transition<wchar_t>;$/;"	m	class:drgxtokenizer	typeref:class:drgxtokenizer::	file:
drgxtokenizer::Transition::Transition	datastructs.cpp	/^    Transition<T_data>::Transition (const Range<T_data>& r, State<T_data>* s)$/;"	f	class:drgxtokenizer::Transition	signature:(const Range<T_data>& r, State<T_data>* s)
drgxtokenizer::Transition::Transition	datastructs.cpp	/^    Transition<T_data>::Transition (const Transition<T_data>& r)$/;"	f	class:drgxtokenizer::Transition	signature:(const Transition<T_data>& r)
drgxtokenizer::Transition::Transition	datastructs.cpp	/^    Transition<T_data>::Transition (const Transition<T_data>& t, T_data a, T_data b)$/;"	f	class:drgxtokenizer::Transition	signature:(const Transition<T_data>& t, T_data a, T_data b)
drgxtokenizer::Transition::Transition	datastructs.cpp	/^    Transition<T_data>::Transition (const std::set<State<T_data>*>& t, T_data a, T_data b)$/;"	f	class:drgxtokenizer::Transition	signature:(const std::set<State<T_data>*>& t, T_data a, T_data b)
drgxtokenizer::Transition::Transition	datastructs.cpp	/^    Transition<T_data>::Transition (short spec)$/;"	f	class:drgxtokenizer::Transition	signature:(short spec)
drgxtokenizer::Transition::Transition	datastructs.h	/^    Transition(const Range<T_data>&, State<T_data>* = NULL);$/;"	p	struct:drgxtokenizer::Transition	access:public	signature:(const Range<T_data>&, State<T_data>* = NULL)
drgxtokenizer::Transition::Transition	datastructs.h	/^    Transition(const Transition&);$/;"	p	struct:drgxtokenizer::Transition	access:public	signature:(const Transition&)
drgxtokenizer::Transition::Transition	datastructs.h	/^    Transition(const Transition&, T_data, T_data);$/;"	p	struct:drgxtokenizer::Transition	access:public	signature:(const Transition&, T_data, T_data)
drgxtokenizer::Transition::Transition	datastructs.h	/^    Transition(const std::set<State<T_data>*>&, T_data, T_data);$/;"	p	struct:drgxtokenizer::Transition	access:public	signature:(const std::set<State<T_data>*>&, T_data, T_data)
drgxtokenizer::Transition::Transition	datastructs.h	/^    Transition(short spec);$/;"	p	struct:drgxtokenizer::Transition	access:public	signature:(short spec)
drgxtokenizer::Transition::states	datastructs.h	/^    std::set<State<T_data>*> states;$/;"	m	struct:drgxtokenizer::Transition	access:public
drgxtokenizer::WTokenizer	tokenizer.h	/^typedef Tokenizer<wchar_t> WTokenizer;$/;"	t	namespace:drgxtokenizer
drgxtokenizer::WTokenizer	tokenizer_lib.cpp	/^  typedef Tokenizer<wchar_t> WTokenizer;$/;"	t	namespace:drgxtokenizer	file:
drgxtokenizer::sfAccepting	datastructs.h	/^  const short sfAccepting = 8;$/;"	m	namespace:drgxtokenizer
drgxtokenizer::sfLambda	datastructs.h	/^  const short sfLambda = 16;$/;"	m	namespace:drgxtokenizer
drgxtokenizer::toktype_any	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
drgxtokenizer::toktype_automaton	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
drgxtokenizer::toktype_choice	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
drgxtokenizer::toktype_concat	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
drgxtokenizer::toktype_expbegin	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
drgxtokenizer::toktype_expend	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
drgxtokenizer::toktype_mark	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
drgxtokenizer::toktype_pbegin	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
drgxtokenizer::toktype_pend	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
drgxtokenizer::toktype_plus	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
drgxtokenizer::toktype_range	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
drgxtokenizer::toktype_star	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
drgxtokenizer::toktype_string	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
drgxtokenizer::ttBegin	datastructs.h	/^  const short ttBegin = 2;$/;"	m	namespace:drgxtokenizer
drgxtokenizer::ttEnd	datastructs.h	/^  const short ttEnd = 4;$/;"	m	namespace:drgxtokenizer
drgxtokenizer::ttFullMask	datastructs.h	/^  const short ttFullMask = 7;$/;"	m	namespace:drgxtokenizer
drgxtokenizer::ttSep	datastructs.h	/^  const short ttSep = 1;$/;"	m	namespace:drgxtokenizer
drgxtokenizer::type	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	g	namespace:drgxtokenizer
end	datastructs.h	/^      T_data end;$/;"	m	struct:drgxtokenizer::Range	access:public
engine	tokenizer.h	/^        drgxtokenizer::FA<T_data> engine;$/;"	m	class:drgxtokenizer::Tokenizer	access:private
entering	automaton.h	/^        State<T_data>* entering;$/;"	m	class:drgxtokenizer::FA	access:private
flags	datastructs.h	/^        short flags; \/\/should be removed, if possible (and replaced by flags)$/;"	m	class:drgxtokenizer::State	access:public
format	tags	/^!_TAG_FILE_FORMAT	2	\/extended format; --format=1 will not append ;" to lines\/$/;"	v
function	DOC_dev	/^- First pass converts the input regular expression into a queue of tokens (character ranges and trivial substrings are converted directly into an automaton while other meta characters are converted into tokens of corresponding types). That is done by calling the ReadToken function, which works as a lexical analyzer. $/;"	v
granted	LICENSE	/^Permission is hereby granted, free of charge, to any person obtaining a copy$/;"	v
id	DOC_dev	/^        int id; \/\/starts as tokenid; later may become whatever$/;"	m	struct:StateClass	file:	access:public
id	automaton.h	/^          int id; \/\/starts as tokenid; later may become whatever$/;"	m	struct:drgxtokenizer::FA::StateClass	access:public
is_operator	tokenizer.cpp	/^    bool Tokenizer<T_data> ::is_operator(T_data c)$/;"	f	class:drgxtokenizer::Tokenizer	signature:(T_data c)
is_operator	tokenizer.h	/^        static bool is_operator(T_data c);$/;"	p	class:drgxtokenizer::Tokenizer	access:private	signature:(T_data c)
main	main.cpp	/^int main()$/;"	f	signature:()
merge	LICENSE	/^to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell$/;"	v
modify	LICENSE	/^to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell$/;"	v
operator ()	automaton.cpp	/^    bool FA<T_data>::state_set_comparer::operator ()(const std::set<State<T_data>*> * lhs, const std::set<State<T_data>*> * rhs) const$/;"	f	class:drgxtokenizer::FA::state_set_comparer	signature:(const std::set<State<T_data>*> * lhs, const std::set<State<T_data>*> * rhs) const
operator ()	automaton.h	/^          bool operator() (const std::set<State<T_data>*>* lhs, const std::set<State<T_data>*>* rhs) const;$/;"	p	struct:drgxtokenizer::FA::state_set_comparer	access:public	signature:(const std::set<State<T_data>*>* lhs, const std::set<State<T_data>*>* rhs) const
operator -	automaton.cpp	/^    const FA<T_data> FA<T_data>::operator-(const FA<T_data>& d)$/;"	f	class:drgxtokenizer::FA	signature:(const FA<T_data>& d)
operator -	automaton.h	/^        const FA operator-(const FA&);$/;"	p	class:drgxtokenizer::FA	access:public	signature:(const FA&)
operator <	DOC_dev	/^        bool operator<(const StateClass&) const;$/;"	p	struct:StateClass	file:	access:public	signature:(const StateClass&) const
operator <	automaton.cpp	/^    bool FA<T_data>::StateClass::operator<(const StateClass& rhs) const$/;"	f	class:drgxtokenizer::FA::StateClass	signature:(const StateClass& rhs) const
operator <	automaton.h	/^          bool operator<(const StateClass&) const;$/;"	p	struct:drgxtokenizer::FA::StateClass	access:public	signature:(const StateClass&) const
operator <	datastructs.cpp	/^    bool Range<T_data> ::operator<(const Range<T_data> & d) const$/;"	f	class:drgxtokenizer::Range	signature:(const Range<T_data> & d) const
operator <	datastructs.h	/^      bool operator<(const Range&) const;$/;"	p	struct:drgxtokenizer::Range	access:public	signature:(const Range&) const
operator =	automaton.cpp	/^    FA<T_data>& FA<T_data>::operator=(const FA<T_data>& d)$/;"	f	class:drgxtokenizer::FA	signature:(const FA<T_data>& d)
operator =	automaton.h	/^        FA& operator=(const FA&);$/;"	p	class:drgxtokenizer::FA	access:public	signature:(const FA&)
operator >	datastructs.cpp	/^    bool Range<T_data> ::operator>(const Range<T_data> & d) const$/;"	f	class:drgxtokenizer::Range	signature:(const Range<T_data> & d) const
operator >	datastructs.h	/^      bool operator>(const Range&) const;$/;"	p	struct:drgxtokenizer::Range	access:public	signature:(const Range&) const
operator |	automaton.cpp	/^    const FA<T_data> FA<T_data>::operator|(const FA<T_data>& d)$/;"	f	class:drgxtokenizer::FA	signature:(const FA<T_data>& d)
operator |	automaton.h	/^        const FA operator|(const FA&);$/;"	p	class:drgxtokenizer::FA	access:public	signature:(const FA&)
plus	automaton.cpp	/^    const FA<T_data> FA<T_data>::plus()$/;"	f	class:drgxtokenizer::FA	signature:()
plus	automaton.h	/^        const FA plus();$/;"	p	class:drgxtokenizer::FA	access:public	signature:()
publish	LICENSE	/^to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell$/;"	v
qmark	automaton.cpp	/^    const FA<T_data> FA<T_data>::qmark()$/;"	f	class:drgxtokenizer::FA	signature:()
qmark	automaton.h	/^        const FA qmark();$/;"	p	class:drgxtokenizer::FA	access:public	signature:()
representant	DOC_dev	/^        State * representant;$/;"	m	struct:StateClass	file:	access:public
representant	automaton.h	/^          State<T_data>* representant;$/;"	m	struct:drgxtokenizer::FA::StateClass	access:public
restriction	LICENSE	/^in the Software without restriction, including without limitation the rights$/;"	v
s	tokenizer.h	/^          std::basic_string<T_data> s;$/;"	m	struct:drgxtokenizer::Tokenizer::token	access:public
sfAccepting	datastructs.h	/^  const short sfAccepting = 8;$/;"	m	namespace:drgxtokenizer
sfLambda	datastructs.h	/^  const short sfLambda = 16;$/;"	m	namespace:drgxtokenizer
size	automaton.h	/^        int size;$/;"	m	class:drgxtokenizer::FA	access:public
so	LICENSE	/^furnished to do so, subject to the following conditions:$/;"	v
special	datastructs.h	/^      short special;$/;"	m	struct:drgxtokenizer::Range	access:public
star	automaton.cpp	/^    const FA<T_data> FA<T_data>::star()$/;"	f	class:drgxtokenizer::FA	signature:()
star	automaton.h	/^        const FA star();$/;"	p	class:drgxtokenizer::FA	access:public	signature:()
start	datastructs.h	/^      T_data start;$/;"	m	struct:drgxtokenizer::Range	access:public
state_set_comparer	automaton.h	/^        struct state_set_comparer$/;"	s	class:drgxtokenizer::FA	access:private
states	datastructs.h	/^    std::set<State<T_data>*> states;$/;"	m	struct:drgxtokenizer::Transition	access:public
sublicense	LICENSE	/^to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell$/;"	v
supported	DOC_user_guide	/^This project uses Unix-like regex notation. Only basic ("algebraic") regex operations are supported, but the notation resembles extended regex (no slashes for meta meaning!):$/;"	v
t	tokenizer.h	/^          drgxtokenizer::type t;$/;"	m	struct:drgxtokenizer::Tokenizer::token	access:public
taken	DOC_dev	/^Solution is to join smaller automatons into bigger ones in smaller steps. The diagram of what happens can be imagined as an n-ary tree for some n in which leaves are obtained directly from regexes. This is done by converting every regex obtained directly to a DFA from the constructed NFA and pushing it onto the FAstack. Whenever the size of the nth automaton on stack is less or equal to the size of pushed automaton, the last n automatons are taken, joined into a new NFA using the choice operator and transformed to a new DFA which is then pushed back onto the stack.$/;"	v
tempStates	DOC_dev	/^      States tempStates; \/\/full list of states; serves for reduction; currently filled during NFA->DFA conversion$/;"	v
tempStates	automaton.h	/^        std::set<State<T_data>*> tempStates; \/\/full list of states; serves for reduction; currently filled during NFA->DFA conversion$/;"	m	class:drgxtokenizer::FA	access:private
token	tokenizer.cpp	/^    Tokenizer<T_data> ::token::token(type t_, std::basic_string<T_data> s_)$/;"	f	class:drgxtokenizer::Tokenizer::token	signature:(type t_, std::basic_string<T_data> s_)
token	tokenizer.cpp	/^    Tokenizer<T_data>::token::token()$/;"	f	class:drgxtokenizer::Tokenizer::token	signature:()
token	tokenizer.cpp	/^    Tokenizer<T_data>::token::token(FA<T_data> automaton)$/;"	f	class:drgxtokenizer::Tokenizer::token	signature:(FA<T_data> automaton)
token	tokenizer.h	/^          token();$/;"	p	struct:drgxtokenizer::Tokenizer::token	access:public	signature:()
token	tokenizer.h	/^          token(drgxtokenizer::FA<T_data>);$/;"	p	struct:drgxtokenizer::Tokenizer::token	access:public	signature:(drgxtokenizer::FA<T_data>)
token	tokenizer.h	/^          token(drgxtokenizer::type,std::basic_string<T_data>);$/;"	p	struct:drgxtokenizer::Tokenizer::token	access:public	signature:(drgxtokenizer::type,std::basic_string<T_data>)
token	tokenizer.h	/^        struct token \/\/just regex construction token :-)$/;"	s	class:drgxtokenizer::Tokenizer	access:private
tokenCount	tokenizer.h	/^        int tokenCount;$/;"	m	class:drgxtokenizer::Tokenizer	access:private
tokenid	datastructs.h	/^        short tokenid;$/;"	m	class:drgxtokenizer::State	access:public
toktype_any	tags	/^drgxtokenizer::toktype_any	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_any	tags	/^drgxtokenizer::toktype_automaton	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_any	tags	/^drgxtokenizer::toktype_choice	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_any	tags	/^drgxtokenizer::toktype_concat	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_any	tags	/^drgxtokenizer::toktype_expbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_any	tags	/^drgxtokenizer::toktype_expend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_any	tags	/^drgxtokenizer::toktype_mark	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_any	tags	/^drgxtokenizer::toktype_pbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_any	tags	/^drgxtokenizer::toktype_pend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_any	tags	/^drgxtokenizer::toktype_plus	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_any	tags	/^drgxtokenizer::toktype_range	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_any	tags	/^drgxtokenizer::toktype_star	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_any	tags	/^drgxtokenizer::toktype_string	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_any	tags	/^drgxtokenizer::type	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	g	namespace:drgxtokenizer$/;"	e	enum:type	file:
toktype_any	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
toktype_automaton	tags	/^drgxtokenizer::toktype_any	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_automaton	tags	/^drgxtokenizer::toktype_automaton	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_automaton	tags	/^drgxtokenizer::toktype_choice	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_automaton	tags	/^drgxtokenizer::toktype_concat	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_automaton	tags	/^drgxtokenizer::toktype_expbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_automaton	tags	/^drgxtokenizer::toktype_expend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_automaton	tags	/^drgxtokenizer::toktype_mark	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_automaton	tags	/^drgxtokenizer::toktype_pbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_automaton	tags	/^drgxtokenizer::toktype_pend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_automaton	tags	/^drgxtokenizer::toktype_plus	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_automaton	tags	/^drgxtokenizer::toktype_range	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_automaton	tags	/^drgxtokenizer::toktype_star	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_automaton	tags	/^drgxtokenizer::toktype_string	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_automaton	tags	/^drgxtokenizer::type	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	g	namespace:drgxtokenizer$/;"	e	enum:type	file:
toktype_automaton	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
toktype_choice	tags	/^drgxtokenizer::toktype_any	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_choice	tags	/^drgxtokenizer::toktype_automaton	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_choice	tags	/^drgxtokenizer::toktype_choice	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_choice	tags	/^drgxtokenizer::toktype_concat	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_choice	tags	/^drgxtokenizer::toktype_expbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_choice	tags	/^drgxtokenizer::toktype_expend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_choice	tags	/^drgxtokenizer::toktype_mark	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_choice	tags	/^drgxtokenizer::toktype_pbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_choice	tags	/^drgxtokenizer::toktype_pend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_choice	tags	/^drgxtokenizer::toktype_plus	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_choice	tags	/^drgxtokenizer::toktype_range	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_choice	tags	/^drgxtokenizer::toktype_star	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_choice	tags	/^drgxtokenizer::toktype_string	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_choice	tags	/^drgxtokenizer::type	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	g	namespace:drgxtokenizer$/;"	e	enum:type	file:
toktype_choice	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
toktype_concat	tags	/^drgxtokenizer::toktype_any	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_concat	tags	/^drgxtokenizer::toktype_automaton	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_concat	tags	/^drgxtokenizer::toktype_choice	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_concat	tags	/^drgxtokenizer::toktype_concat	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_concat	tags	/^drgxtokenizer::toktype_expbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_concat	tags	/^drgxtokenizer::toktype_expend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_concat	tags	/^drgxtokenizer::toktype_mark	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_concat	tags	/^drgxtokenizer::toktype_pbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_concat	tags	/^drgxtokenizer::toktype_pend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_concat	tags	/^drgxtokenizer::toktype_plus	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_concat	tags	/^drgxtokenizer::toktype_range	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_concat	tags	/^drgxtokenizer::toktype_star	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_concat	tags	/^drgxtokenizer::toktype_string	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_concat	tags	/^drgxtokenizer::type	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	g	namespace:drgxtokenizer$/;"	e	enum:type	file:
toktype_concat	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
toktype_expbegin	tags	/^drgxtokenizer::toktype_any	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expbegin	tags	/^drgxtokenizer::toktype_automaton	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expbegin	tags	/^drgxtokenizer::toktype_choice	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expbegin	tags	/^drgxtokenizer::toktype_concat	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expbegin	tags	/^drgxtokenizer::toktype_expbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expbegin	tags	/^drgxtokenizer::toktype_expend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expbegin	tags	/^drgxtokenizer::toktype_mark	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expbegin	tags	/^drgxtokenizer::toktype_pbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expbegin	tags	/^drgxtokenizer::toktype_pend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expbegin	tags	/^drgxtokenizer::toktype_plus	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expbegin	tags	/^drgxtokenizer::toktype_range	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expbegin	tags	/^drgxtokenizer::toktype_star	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expbegin	tags	/^drgxtokenizer::toktype_string	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expbegin	tags	/^drgxtokenizer::type	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	g	namespace:drgxtokenizer$/;"	e	enum:type	file:
toktype_expbegin	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
toktype_expend	tags	/^drgxtokenizer::toktype_any	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expend	tags	/^drgxtokenizer::toktype_automaton	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expend	tags	/^drgxtokenizer::toktype_choice	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expend	tags	/^drgxtokenizer::toktype_concat	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expend	tags	/^drgxtokenizer::toktype_expbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expend	tags	/^drgxtokenizer::toktype_expend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expend	tags	/^drgxtokenizer::toktype_mark	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expend	tags	/^drgxtokenizer::toktype_pbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expend	tags	/^drgxtokenizer::toktype_pend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expend	tags	/^drgxtokenizer::toktype_plus	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expend	tags	/^drgxtokenizer::toktype_range	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expend	tags	/^drgxtokenizer::toktype_star	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expend	tags	/^drgxtokenizer::toktype_string	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_expend	tags	/^drgxtokenizer::type	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	g	namespace:drgxtokenizer$/;"	e	enum:type	file:
toktype_expend	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
toktype_mark	tags	/^drgxtokenizer::toktype_any	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_mark	tags	/^drgxtokenizer::toktype_automaton	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_mark	tags	/^drgxtokenizer::toktype_choice	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_mark	tags	/^drgxtokenizer::toktype_concat	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_mark	tags	/^drgxtokenizer::toktype_expbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_mark	tags	/^drgxtokenizer::toktype_expend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_mark	tags	/^drgxtokenizer::toktype_mark	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_mark	tags	/^drgxtokenizer::toktype_pbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_mark	tags	/^drgxtokenizer::toktype_pend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_mark	tags	/^drgxtokenizer::toktype_plus	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_mark	tags	/^drgxtokenizer::toktype_range	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_mark	tags	/^drgxtokenizer::toktype_star	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_mark	tags	/^drgxtokenizer::toktype_string	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_mark	tags	/^drgxtokenizer::type	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	g	namespace:drgxtokenizer$/;"	e	enum:type	file:
toktype_mark	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
toktype_pbegin	tags	/^drgxtokenizer::toktype_any	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pbegin	tags	/^drgxtokenizer::toktype_automaton	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pbegin	tags	/^drgxtokenizer::toktype_choice	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pbegin	tags	/^drgxtokenizer::toktype_concat	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pbegin	tags	/^drgxtokenizer::toktype_expbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pbegin	tags	/^drgxtokenizer::toktype_expend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pbegin	tags	/^drgxtokenizer::toktype_mark	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pbegin	tags	/^drgxtokenizer::toktype_pbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pbegin	tags	/^drgxtokenizer::toktype_pend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pbegin	tags	/^drgxtokenizer::toktype_plus	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pbegin	tags	/^drgxtokenizer::toktype_range	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pbegin	tags	/^drgxtokenizer::toktype_star	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pbegin	tags	/^drgxtokenizer::toktype_string	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pbegin	tags	/^drgxtokenizer::type	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	g	namespace:drgxtokenizer$/;"	e	enum:type	file:
toktype_pbegin	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
toktype_pend	tags	/^drgxtokenizer::toktype_any	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pend	tags	/^drgxtokenizer::toktype_automaton	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pend	tags	/^drgxtokenizer::toktype_choice	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pend	tags	/^drgxtokenizer::toktype_concat	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pend	tags	/^drgxtokenizer::toktype_expbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pend	tags	/^drgxtokenizer::toktype_expend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pend	tags	/^drgxtokenizer::toktype_mark	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pend	tags	/^drgxtokenizer::toktype_pbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pend	tags	/^drgxtokenizer::toktype_pend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pend	tags	/^drgxtokenizer::toktype_plus	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pend	tags	/^drgxtokenizer::toktype_range	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pend	tags	/^drgxtokenizer::toktype_star	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pend	tags	/^drgxtokenizer::toktype_string	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_pend	tags	/^drgxtokenizer::type	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	g	namespace:drgxtokenizer$/;"	e	enum:type	file:
toktype_pend	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
toktype_plus	tags	/^drgxtokenizer::toktype_any	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_plus	tags	/^drgxtokenizer::toktype_automaton	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_plus	tags	/^drgxtokenizer::toktype_choice	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_plus	tags	/^drgxtokenizer::toktype_concat	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_plus	tags	/^drgxtokenizer::toktype_expbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_plus	tags	/^drgxtokenizer::toktype_expend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_plus	tags	/^drgxtokenizer::toktype_mark	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_plus	tags	/^drgxtokenizer::toktype_pbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_plus	tags	/^drgxtokenizer::toktype_pend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_plus	tags	/^drgxtokenizer::toktype_plus	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_plus	tags	/^drgxtokenizer::toktype_range	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_plus	tags	/^drgxtokenizer::toktype_star	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_plus	tags	/^drgxtokenizer::toktype_string	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_plus	tags	/^drgxtokenizer::type	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	g	namespace:drgxtokenizer$/;"	e	enum:type	file:
toktype_plus	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
toktype_range	tags	/^drgxtokenizer::toktype_any	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_range	tags	/^drgxtokenizer::toktype_automaton	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_range	tags	/^drgxtokenizer::toktype_choice	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_range	tags	/^drgxtokenizer::toktype_concat	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_range	tags	/^drgxtokenizer::toktype_expbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_range	tags	/^drgxtokenizer::toktype_expend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_range	tags	/^drgxtokenizer::toktype_mark	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_range	tags	/^drgxtokenizer::toktype_pbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_range	tags	/^drgxtokenizer::toktype_pend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_range	tags	/^drgxtokenizer::toktype_plus	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_range	tags	/^drgxtokenizer::toktype_range	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_range	tags	/^drgxtokenizer::toktype_star	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_range	tags	/^drgxtokenizer::toktype_string	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_range	tags	/^drgxtokenizer::type	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	g	namespace:drgxtokenizer$/;"	e	enum:type	file:
toktype_range	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
toktype_star	tags	/^drgxtokenizer::toktype_any	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_star	tags	/^drgxtokenizer::toktype_automaton	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_star	tags	/^drgxtokenizer::toktype_choice	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_star	tags	/^drgxtokenizer::toktype_concat	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_star	tags	/^drgxtokenizer::toktype_expbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_star	tags	/^drgxtokenizer::toktype_expend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_star	tags	/^drgxtokenizer::toktype_mark	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_star	tags	/^drgxtokenizer::toktype_pbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_star	tags	/^drgxtokenizer::toktype_pend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_star	tags	/^drgxtokenizer::toktype_plus	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_star	tags	/^drgxtokenizer::toktype_range	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_star	tags	/^drgxtokenizer::toktype_star	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_star	tags	/^drgxtokenizer::toktype_string	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_star	tags	/^drgxtokenizer::type	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	g	namespace:drgxtokenizer$/;"	e	enum:type	file:
toktype_star	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
toktype_string	tags	/^drgxtokenizer::toktype_any	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_string	tags	/^drgxtokenizer::toktype_automaton	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_string	tags	/^drgxtokenizer::toktype_choice	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_string	tags	/^drgxtokenizer::toktype_concat	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_string	tags	/^drgxtokenizer::toktype_expbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_string	tags	/^drgxtokenizer::toktype_expend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_string	tags	/^drgxtokenizer::toktype_mark	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_string	tags	/^drgxtokenizer::toktype_pbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_string	tags	/^drgxtokenizer::toktype_pend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_string	tags	/^drgxtokenizer::toktype_plus	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_string	tags	/^drgxtokenizer::toktype_range	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_string	tags	/^drgxtokenizer::toktype_star	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_string	tags	/^drgxtokenizer::toktype_string	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	e	enum:type	file:
toktype_string	tags	/^drgxtokenizer::type	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	g	namespace:drgxtokenizer$/;"	e	enum:type	file:
toktype_string	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	e	enum:drgxtokenizer::type
transitions	datastructs.h	/^        std::set<Transition<T_data> > transitions;$/;"	m	class:drgxtokenizer::State	access:public
ttBegin	datastructs.h	/^  const short ttBegin = 2;$/;"	m	namespace:drgxtokenizer
ttEnd	datastructs.h	/^  const short ttEnd = 4;$/;"	m	namespace:drgxtokenizer
ttFullMask	datastructs.h	/^  const short ttFullMask = 7;$/;"	m	namespace:drgxtokenizer
ttSep	datastructs.h	/^  const short ttSep = 1;$/;"	m	namespace:drgxtokenizer
type	tags	/^drgxtokenizer::toktype_any	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	g	file:
type	tags	/^drgxtokenizer::toktype_automaton	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	g	file:
type	tags	/^drgxtokenizer::toktype_choice	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	g	file:
type	tags	/^drgxtokenizer::toktype_concat	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	g	file:
type	tags	/^drgxtokenizer::toktype_expbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	g	file:
type	tags	/^drgxtokenizer::toktype_expend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	g	file:
type	tags	/^drgxtokenizer::toktype_mark	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	g	file:
type	tags	/^drgxtokenizer::toktype_pbegin	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	g	file:
type	tags	/^drgxtokenizer::toktype_pend	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	g	file:
type	tags	/^drgxtokenizer::toktype_plus	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	g	file:
type	tags	/^drgxtokenizer::toktype_range	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	g	file:
type	tags	/^drgxtokenizer::toktype_star	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	g	file:
type	tags	/^drgxtokenizer::toktype_string	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	e	enum:drgxtokenizer::type$/;"	g	file:
type	tags	/^drgxtokenizer::type	tokenizer.h	\/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$\/;"	g	namespace:drgxtokenizer$/;"	g	file:
type	tokenizer.h	/^  enum type{toktype_expbegin, toktype_expend, toktype_pbegin, toktype_pend, toktype_star, toktype_mark, toktype_plus, toktype_choice, toktype_string, toktype_range, toktype_concat, toktype_automaton, toktype_any};$/;"	g	namespace:drgxtokenizer
use	LICENSE	/^to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell$/;"	v
~Tokenizer	tokenizer.cpp	/^    Tokenizer<T_data>::~Tokenizer<T_data> ()$/;"	f	class:drgxtokenizer::Tokenizer	signature:()
~Tokenizer	tokenizer.h	/^        ~Tokenizer();$/;"	p	class:drgxtokenizer::Tokenizer	access:public	signature:()
